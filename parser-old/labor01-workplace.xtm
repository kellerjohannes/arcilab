(sys:load "/home/johannes/Coding/extempore/arcilab/parser-old/xml-parser.xtm")
(sys:load "/home/johannes/Coding/extempore/arcilab/parser-old/arciorgano-comm.xtm")

(bind-func convert
  (let ((workpath (Str "/home/johannes/Coding/extempore/arcilab/parser-old/labor01/")))
    (lambda (filename:String*)
      (read_music_xml2 0 (cat2 workpath (cat2 filename (Str ".xml")))
                         (cat2 workpath (cat2 filename (Str ".xtm"))))
      (printf "file '%s' read.\n\n" (cstring filename))
      void)))

; labor, 7th of october 2020, klasse caspar johannes walter

; all files are in working condition. unresolved problems while parsing:
; - ties are confusing
; - all notes are stopped at bar lines

($ (convert (Str "1_3Komma/Arciorgano_Aufnahmen_1_3_Komma")))
($ (convert (Str "1_3Komma/vicentino_dolce1_3_Komma")))
($ (convert (Str "1_3Komma/vicentino_musica_1_3_Komma")))
($ (convert (Str "1_3Komma/vicentino_soave_modern_1_3Komma_lang")))
($ (convert (Str "1_3Komma/vicentino_soave_modern_1_3Komma_verkuerzt")))
($ (convert (Str "1_3Komma/Clusterglissandi/Arciorgano_Aufnahmen_Clustergissandi_ab_breit")))
($ (convert (Str "1_3Komma/Clusterglissandi/Arciorgano_Aufnahmen_Clustergissandi_Gitbi")))
($ (convert (Str "1_3Komma/Clusterglissandi/Arciorgano_Aufnahmen_Clustergissandi_Gi")))
($ (convert (Str "1_3Komma/Clusterglissandi/Arciorgano_Aufnahmen_Clusterglissandi_Sinusnachbildung")))
($ (convert (Str "1_3Komma/Clusterglissandi/Arciorgano_Aufnahmen_Helmholtz-Fahrrad")))
($ (convert (Str "1_3Komma/Clusterglissandi/Arciorgano_Aufnahmen_Helmholtz-Fahrrad3_besser")))
($ (convert (Str "1_3Komma/Clusterglissandi/Arciorgano_Aufnahmen_Helmholtz-Fahrrad3")))
($ (convert (Str "1_4Komma/Arciorgano_Aufnahmen_1_4_Komma")))
($ (convert (Str "1_4Komma/Arciorgano_Aufnahmen_Helmholtz-Fahrrad2")))

;($ (convert (Str "1_4Komma/Spekulative_Intonationspraxis2_1_4Komma_nicht_transp")))
;($ (convert (Str "1_4Komma/spek-int-deb01")))
;($ (convert (Str "1_4Komma/spek-int-deb02")))
($ (convert (Str "1_4Komma/spek-int-deb03")))

; problem unbekannte alteration:
;($ (convert (Str "1_3Komma/Clusterglissandi/Arciorgano_Aufnahmen_Clustergissandi")))
($ (convert (Str "1_3Komma/Clusterglissandi/Arciorgano_Aufnahmen_Clustergissandi_deb01")))

; revised version, after labor01 meeting
($ (convert (Str "1_4Komma/Spekulative_Intonationspraxis_2_1_4Komma_nicht_transp_I")))
($ (convert (Str "1_4Komma/vicentino_madonna_1_4_Komma_trans_rev")))
($ (convert (Str "1_4Komma/vicentino_soave_1_4_Komma_trans_rev")))

; new version of Spekulative Intonationspraxis
($ (convert (Str "1_4Komma/Spek_Int_I_v1")))
($ (convert (Str "1_4Komma/Spek_Int_I_v2")))

; Kadenzvarianten
($ (convert (Str "../kadenzen/kadenzvarianten")))




;;;;;; for labor03, 16th of November 2020

;; attention: two key numbering systems in use:
;  1. old system, according to mechanical numbering of the pipes
;  2. new system, according to the pitch order

; this is dealt with in the writeToPort procedure in arciorgano-comm.xtm
; the old system has a remap array starting with 1 2 3 4 6 5 ...
; the new system has a remap array starting with 0 -1 1 -1 2 -1 3 -1 4 ..., new named
; writetoPort2. 

; prn / rln / pln are the only higher order procedures that use writeToPort, adapt there
; to writeToPort or writeToPort2 accordingly (old parser data uses old system, app export
; reader uses new system



; adapt work path for parsing the xml files of labor03
(bind-func convert
  (let ((workpath (Str "/home/johannes/Coding/extempore/arcilab/parser-old/labor03/")))
    (lambda (filename:String*)
      (read_music_xml2 0 (cat2 workpath (cat2 filename (Str ".xml")))
                         (cat2 workpath (cat2 filename (Str ".xtm"))))
      (printf "file '%s' read.\n\n" (cstring filename))
      void)))

; data from CJW, version 15th of November 2020, causing no parsing problems:
; ($ (convert (Str "durakkorde-mollakkorde-mode3")))   ; replaced
; ($ (convert (Str "fluxe-mode3")))   ; replaced by new version
($ (convert (Str "fox-strangeways-paradoxon")))
($ (convert (Str "frescobaldi")))
; ($ (convert (Str "rossi-mode3-normal")))  ; replaced by individual files
($ (convert (Str "rossi-mode3-umgestimmt")))
($ (convert (Str "wagner-tristan")))

; new rossi version, with one global instrument:
($ (convert (Str "rossi-mode3-normal")))
($ (convert (Str "rossi-II-2-umgestimmt")))

; new version dur/mollakkorde
($ (convert (Str "dur-mollakkorde-mode-3")))

; split version of flux, still extempore kill problem with fluxe-mode-3-a
($ (convert (Str "fluxe-mode-3-a")))
($ (convert (Str "fluxe-mode-3-b")))






; algorithm to parse app export data (.txt files)

; convert ms to audio samples
(define mstoas
  (lambda (ms)
    (* 44100 (/ ms 1000))))

; play a chord
(define plc
  (lambda (time dur l)
    (cond ((null? l) 0)
          (else (pln time (car l) dur)
                (plc time dur (cdr l))))))

; play app data (list)
(define plapp
  (lambda (l time)
    (cond ((null? l) 0)
          (else
            (let* ((int (mstoas (car (car l))))
                   (dur (+ int (mstoas (car (cdr (car l)))))))
            (plc time dur (cdr (cdr (car l))))
            (callback (+ time 100) 'plapp (cdr l) (+ time int)))))))

(plapp come-sian (now))
(plapp dur-32zu27 (now)) 
(plapp dur-5zu4 (now))
(plapp dur-6zu5 (now))
(plapp dur-7zu6 (now))
(plapp dur-uterz (now))
(plapp kadenzen (now))
(plapp konstrukt (now))
(plapp overlap (now))
(plapp overlap2 (now))

(define come-sian '((2000 -50 37 58 83 73) 
                    (1000 -50 28 52 83 73)
                    (1000 -50 32 68 52 77)
                    (4000 -1000 22 58 70 80)
                    (2000 -50 37 58 83 73)
                    (1000 -50 29 53 82 74)
                    (1000 -50 33 69 53 78)
                    (4000 -1000 22 58 70 80)))


(define dur-32zu27 '((1000 0 68 104 79 88)
                     (1000 0 58 80 94 106)
                     (1000 0 50 97 86 107)
                     (1000 0 41 77 98 88 113)
                     (4000 0 33 69 105 89 116)))

(define dur-5zu4 '((1000 0 77 98 88)
                   (1000 0 73 88 100)
                   (1000 0 75 85 100)
                   (1000 0 87 75 96)
                   (1000 0 72 99 87)
                   (1000 0 99 84 74)
                   (1000 0 74 86 95)
                   (4000 0 71 97 86)))


(define dur-6zu5 '((1000 0 63 99 84 74)
                   (1000 0 53 74 89 101)
                   (1000 0 44 91 80 101)
                   (1000 0 34 70 91 81 106)
                   (1000 0 60 81 108 96)
                   (1000 0 51 99 87 108)
                   (1000 0 42 78 99 89 114)
                   (1000 0 69 105 89 116)
                   (1000 0 58 94 106 116)
                   (1000 0 49 96 85 106 121)
                   (1000 0 75 96 123 111)
                   (1000 0 66 102 114 123)
                   (1000 0 57 93 105 114 129)
                   (1000 0 47 105 83 119 130)
                   (1000 0 73 109 121 130)
                   (1000 0 64 100 111 121 136)
                   (4000 0 54 90 138 111 126)))


(define dur-7zu6 '((1000 0 99 87 108 123)
                   (1000 0 79 100 126 115)
                   (1000 0 71 107 118 128)
                   (1000 0 63 99 110 135 120)
                   (4000 0 54 90 138 111 126)))

(define dur-uterz '((1000 0 108 96 117)
                    (1000 0 88 100 109 124)
                    (1000 0 79 100 126 115)
                    (1000 0 71 107 118 128)
                    (1000 0 63 99 135 120 110)
                    (1000 0 52 88 109 124 136)
                    (1000 0 44 80 127 116 137)
                    (1000 0 33 69 105 141 116 125)
                    (1000 0 26 62 98 134 119 145)
                    (4000 0 17 53 125 137 146)))

(define kadenzen     '((1000 0 52 98 73 88)
                       (1000 0 58 70 79 88 94)
                       (2000 -500 37 73 85 94)
                       (1000 0 52 98 73 88)
                       (500 0 58 70 98 79 88)
                       (500 0 58 70 79 88 94)
                       (2000 -500 37 73 85 94)
                       (1000 0 52 98 73 88)
                       (500 0 58 70 98 79 88)
                       (500 0 58 70 87 79 94)
                       (2000 -500 37 73 85 94)
                       (1000 0 52 98 73 88)
                       (1000 0 58 70 87 96 79)
                       (2000 -500 37 73 85 94)
                       (1000 0 51 72 87 96)
                       (1000 0 58 70 87 96)
                       (2000 -500 37 73 85 94)
                       (1000 0 51 72 87 96)
                       (1000 0 58 70 87 94)
                       (2000 -500 37 73 85 94)))

(define konstrukt '((1000 10000 77 98 88)
                    (1000 9000 73 88 100)
                    (1000 8000 75 85 100)
                    (1000 7000 87 75 96)
                    (1000 6000 72 99 87)
                    (1000 5000 99 84 74)
                    (1000 4000 74 86 95)
                    (4000 0 71 97 86)))
                    
(define overlap '((1100 -1050 109)
                  (1010 -950 108)
                  (930 -850 107)
                  (850 -750 106)
                  (770 -650 105)
                  (710 -550 104)
                  (650 -450 103)
                  (600 -350 102)
                  (550 -250 101)
                  (500 -150 100)
                  (440 -50 99)
                  (420 50 98)
                  (380 150 97)
                  (340 250 96)
                  (300 350 95)
                  (260 450 94)
                  (220 550 93)
                  (190 650 92)
                  (170 750 91)
                  (155 650 90)
                  (145 550 89)
                  (140 450 88)
                  (145 350 87)
                  (160 250 86)
                  (180 160 85)
                  (210 80 84)
                  (240 0 83)
                  (280 -60 82)
                  (320 -120 81)
                  (360 -180 80)
                  (400 -260 79)
                  (450 -350 78)
                  (500 -420 77)
                  (550 -500 76)
                  (600 -560 75)
                  (700 -675 74)
                  (800 -790 73)))


(define overlap2 '((1100 4000 109)
                   (1010 3500 108)
                   (930 3000 107)
                   (850 2500 106)
                   (770 2000 105)
                   (710 1600 104)
                   (650 1200 103)
                   (600 900 102)
                   (550 650 101)
                   (500 450 100)
                   (440 300 99)
                   (420 200 98)
                   (380 120 97)
                   (340 50 96)
                   (300 0 95)
                   (260 -50 94)
                   (220 -70 93)
                   (190 -90 92)
                   (170 -100 91)
                   (155 -110 90)
                   (145 -115 89)
                   (140 -120 88)
                   (145 -115 87)
                   (160 -100 86)
                   (180 -80 85)
                   (210 -40 84)
                   (240 0 83)
                   (280 60 82)
                   (320 120 81)
                   (360 220 80)
                   (400 350 79)
                   (450 500 78)
                   (500 800 77)
                   (550 1200 76)
                   (600 2000 75)
                   (700 3000 74)
                   (800 4000 73)))



