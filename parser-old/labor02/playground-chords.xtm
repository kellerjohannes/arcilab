; workshop with jazz students, 23rd of October 2020
; pre-study for Illuminationen IV (carte blanche CJW)

(sys:load "/home/johannes/Coding/extempore/arcilab/parser-old/labor02/arciorgano-comm.xtm")


; play note now
(define plnn
  (lambda (n dur)
    (pln (now) n dur)))

; play list of note now
(define bloc
  (lambda (l dur)
    (cond ((null? l) 0)
          (else (plnn (car l) dur)
                (bloc (cdr l) dur)))))

; start playing a chord, holding
(define ped
  (lambda (l)
    (cond ((null? l) 0)
          (else (prn (car l))
                (pedale (cdr l))))))

; release notes of chord
(define ped-off
  (lambda (l)
    (cond ((null? l) 0)
          (else (rln (car l))
                (ped-off (cdr l))))))

; helper: add keys below the listed keys, in octaves
(define append-lower-octaves
  (lambda (n)
    (let ((nn (- n 36)))
      (cond ((< nn 1) '())
            (else (cons nn (append-lower-octaves nn)))))))

; helper
(define append-upper-octaves
  (lambda (n)
    (let ((nn (+ n 36)))
      (cond ((> nn 147) '())
            (else (cons nn (append-upper-octaves nn)))))))

; explode chord to all octaves on the keyboard
(define bighand
  (lambda (l)
    (cond ((null? l) '())
          (else (cons (car l) (append (append-upper-octaves (car l)) (append-lower-octaves (car l)) (bighand (cdr l))))))))

; transpose by keynumber (tabulature transposition, not interval transposition)
(define transp
  (lambda (l n)
    (map (lambda (x) (+ x n)) l)))

; shift around big chords
(define swipe
  (lambda (l n)
    (bloc (bighand (transp l n)) medium)
    (callback (+ (now) medium) 'swipe l (+ n 1))))

; play a melody, based on a list
(define play-line
  (lambda (l dur)
    (cond ((null? l) 0)
          (else (plnn (car l) dur)
                (callback (+ (now) dur) 'play-line (cdr l) dur)))))

; play a progression of chords, based on a list
(define play-series
  (lambda (l dur)
    (cond ((null? l) 0)
          (else (callback (now) 'bloc (eval (car l)) (* 1.0 dur))
                (callback (+ (now) dur) 'play-series (cdr l) dur)))))

; helper: perform tremolo
(define perf-loop
  (lambda (n endtime int)
    (cond ((> (now) endtime) 0)
          (else (plnn n (* 0.8 int))
                (callback (+ (now) int) 'perf-loop n endtime int)))))

; alternative to plnn: play note in tremolo
(define plperf
  (lambda (n dur int)
    (perf-loop n (+ (now) dur) int)))



(define stacc (* 0.1 *second*))
(define short (* 0.3 *second*))
(define medium (* 1.0 *second*))
(define long (* 3.0 *second*))
(define eternal (* 20.0 *second*))

(define l1 '(73 80 85 88 94 101 106 109))  ; c maj
(define l2 '(73 80 85 88 94 101 106 109 109 106 100 94 88 85 79 73)) ; c maj up and down
(define l3 '(73 80 85 88 94 100 106 109 109 106 100 94 88 85 80 73)) ; c maj up and down, alternative

(define l4 '(75 81 87 90 96 103 108 111)) ; c# maj
(define l5 '(75 82 87 90 96 103 108 111)) ; sharp 2nd degree
(define l6 '(75 82 87 90 96 104 108 111)) ; sharp 2nd and 6th degree
(define l7 '(75 83 87 90 96 105 108 111)) ; extreme 2nd and 6th degree

;(play-line l7 medium)

(define c1 '(74 89 101 118))
(define c2 '(91 73 98 119))

(define c3 '(83 73))
(define c4 '(82 74))


; jossi chords

(define c5 '(121 100 75))
(define c6 '(122 104 98 73 37))
(define c7 '(121 109 94 70))

(define c8 '(116 94 70))
(define c9 '(116 96 92 68))
(define c10 '(115 104 88 64))

;(bloc c9 long)

;(play-series '(c5 c6 c7) long)
;(play-series '(c8 c9 c10) long)
;(play-series '(c5 c6 c7 c8 c9 c10) long)

; end of jossi chords


;(bloc (transp c1 -36) eternal)
;(bloc (transp c2 -36) eternal)
;(bloc (transp c2 0) eternal)

;(bloc (transp c1 0) eternal)
;(bloc (transp c2 -36) eternal)

;(bloc c3 long)
;(bloc c4 long)


;(play-series '(c1 c2) medium)
;(play-line l3 medium)

(define mstoas
  (lambda (t)
    (* t 44.1)))

(define play-progression
  (let ((currentTime 0)
        (currentDuration 0))
  (lambda (time chords times)
    (cond ((null? chords) 0)
          (else 
            (uZZ

