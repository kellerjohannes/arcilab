; vString element (virtual string), represents a substring of a given String*
(bind-type vString <String**,i64,i64>)
; pointer to a String*
; index of first character of substring
; index of last character of substring

(bind-func get_string:[String*,vString*]*
  (lambda (vs)
    (tref vs 0)))
    
(bind-func start:[i64,vString*]*
  (lambda (vs)
    (tref vs 1)))

(bind-func set_start:[void,vString*,i64]*
  (lambda (vs index)
    (cond ((or (< index 0) (> index (length (get_string vs))))
            (printf "vString: index out of range\n")
            void)
          (else (tset! vs 1 index)
                void))))

(bind-func end:[i64,vString*]*
  (lambda (vs)
    (tref vs 2)))

(bind-func set_end:[void,vString*,i64]*
  (lambda (vs index)
    (cond ((or (< index 0) (> index (length (get_string vs))))
            (printf "vString: index out of range\n")
            void)
          (else (tset! vs 2 index)
                void))))

(bind-func set_range:[void,vString*,i64,i64]*
  (lambda (vs s e)
    (cond ((or (< s 0) (> s (length (get_string vs))))
            (printf "vString: index out of range\n")
            void)
          ((or (< e 0) (> e (length (get_string vs))))
            (printf "vString: index out of range\n")
            void)
          ((< e s)
            (printf "vString: end before start\n")
            void)
          (else (tset! vs 1 s)
                (tset! vs 2 e)
                void))))

(bind-func build_string:[String*,vString*]*
  (lambda (vs)
    (substring (get_string vs) (start vs) (end vs))))

(bind-func cVString:[vString*,String**,i64,i64]*
  (lambda (source s e)
    (cond ((or (< s 0) (> s (length (pref source 0))))
            (printf "vString: index out of range\n")
            (set! s 0))
          ((or (< e 0) (> e (length (pref source 0))))
            (printf "vString: index out of range\n")
            (set! e (- (length (pref source 0)) 1)))
          ((< e s)
            (printf "vString: end before start\n")
            (set! s 0)
            (set! e (- (length (pref source 0)) 1)))
          (else 0))
      (let ((res (vString:[vString*,String**,i64,i64]* source s e)))
        res)))

(bind-func cVString:[vString*,String*]*
  (lambda (str)
    (let ((src:String** (halloc 1)))
      (pset! src 0 str)
      (let ((res (vString:[vString*,String**,i64,i64]* src 0 (- (length str) 1))))
        res))))



(bind-func vstringtest
  (lambda ()
    (let ((s (Str "abcdefghijklmno"))
          (src:String** (zalloc 1)))
      (pset! src 0 s)
      (letz ((vs (cVString src 0 14)))
        (printf "str = '%s', s = %lld, e = %lld\n" (cstring (get_string vs))
                                                   (start vs)
                                                   (end vs))))))




; split until index (exclusive)
(bind-func split_first:[String*,String*,i64]*
  (lambda (s index)
    (substring s 0 index)))

(bind-func split_second:[String*,String*,i64]*
  (lambda (s index)
    (substring s index (length s))))

(bind-func find_substring_loop:[i64,String*,String*,i64]*
  (lambda (tbs sf index)
    (cond ((= (- (length sf) 1) (length tbs)) -1)
          ((equal (substring tbs 0 (length sf)) sf) index)
          (else (find_substring_loop (split_second tbs 1) sf (+ 1 index))))))

(bind-func find_substring:[i64,String*,String*]*
  (lambda (tbs sf)
    (cond ((null? tbs) -1)
          ((null? sf) -1)
          ((= 0 (length sf)) -1)
          (else (find_substring_loop tbs sf 0)))))

(bind-func find_substring_from:[i64,String*,String*,i64]*
  (lambda (tbs sf index)
    (cond ((null? tbs) -1)
          ((null? sf) -1)
          ((= 0 (length sf)) -1)
          ((>= index (length tbs)) -1)
          (else (find_substring_loop (split_second tbs index) sf index)))))

(bind-func find_substring_or_loop:[i64,String*,String*,String*,i64]*
  (lambda (tbs sf1 sf2 index)
    (cond ((= 0 (length tbs)) -1)
          ((or (equal (substring tbs 0 (length sf1)) sf1)
               (equal (substring tbs 0 (length sf2)) sf2)) index)
          (else (find_substring_or_loop (split_second tbs 1) sf1 sf2 (+ 1 index))))))

(bind-func find_substring_or:[i64,String*,String*,String*]*
  (lambda (tbs sf1 sf2)
    (cond ((null? tbs) -1)
          ((null? sf1) -1)
          ((null? sf2) -1)
          ((= 0 (length sf1)) -1)
          ((= 0 (length sf2)) -1)
          (else (find_substring_or_loop tbs sf1 sf2 0)))))

(bind-func find_substring_not_or_loop:[i64,String*,String*,String*,i64]*
  (lambda (tbs sf1 sf2 index)
    (cond ((= 0 (length tbs)) -1)
          ((not (or (equal (substring tbs 0 (length sf1)) sf1)
                    (equal (substring tbs 0 (length sf2)) sf2))) index)
          (else (find_substring_not_or_loop (split_second tbs 1) sf1 sf2 (+ 1 index))))))

(bind-func find_substring_not_or:[i64,String*,String*,String*]*
  (lambda (tbs sf1 sf2)
    (cond ((null? tbs) -1)
          ((null? sf1) -1)
          ((null? sf2) -1)
          ((= 0 (length sf1)) -1)
          ((= 0 (length sf2)) -1)
          (else (find_substring_not_or_loop tbs sf1 sf2 0)))))

(bind-func create_quotes:[String*]*
  (lambda ()
    (let ((cs:i8* (halloc 2)))
      (pfill! cs 34 0)
      (Str cs))))

(bind-func create_cquotes:[i8*]*
  (lambda ()
    (let ((cs:i8* (halloc 2)))
      (pfill! cs 34 0)
      cs)))

(bind-func remove_initial_spaces:[String*,String*]*
  (lambda (s)
    (split_second s (find_substring_not_or s (Str " ") (Str "\n")))))

(bind-func extract_i64:[i64,String*]*
  (lambda (s)
    (let ((res:i64* (salloc 1)))
      (sscanf (cstring s) "%lld" res)
      (pref res 0))))

(bind-func extract_float:[float,String*]*
  (lambda (s)
    (let ((res:double* (salloc 1)))
      (sscanf (cstring s) "%f" res)
      (dtof (pref res 0)))))

(bind-func extract_double:[double,String*]*
  (lambda (s) 
    (let ((res:double* (salloc 1)))
      (sscanf (cstring s) "%f" res)
      (pref res 0))))
