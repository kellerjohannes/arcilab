; split until index (exclusive)
(bind-func split_first:[String*,String*,i64]*
  (lambda (s index)
    (substring s 0 index)))

(bind-func split_second:[String*,String*,i64]*
  (lambda (s index)
    (substring s index (length s))))

(bind-func find_substring_loop:[i64,String*,String*,i64]*
  (lambda (tbs sf index)
    (cond ((= (- (length sf) 1) (length tbs)) -1)
          ((equal (substring tbs 0 (length sf)) sf) index)
          (else (find_substring_loop (split_second tbs 1) sf (+ 1 index))))))

(bind-func find_substring:[i64,String*,String*]*
  (lambda (tbs sf)
    (cond ((null? tbs) -1)
          ((null? sf) -1)
          ((= 0 (length sf)) -1)
          (else (find_substring_loop tbs sf 0)))))

(bind-func find_substring_from:[i64,String*,String*,i64]*
  (lambda (tbs sf index)
    (cond ((null? tbs) -1)
          ((null? sf) -1)
          ((= 0 (length sf)) -1)
          ((>= index (length tbs)) -1)
          (else (find_substring_loop (split_second tbs index) sf index)))))

(bind-func find_substring_or_loop:[i64,String*,String*,String*,i64]*
  (lambda (tbs sf1 sf2 index)
    (cond ((= 0 (length tbs)) -1)
          ((or (equal (substring tbs 0 (length sf1)) sf1)
               (equal (substring tbs 0 (length sf2)) sf2)) index)
          (else (find_substring_or_loop (split_second tbs 1) sf1 sf2 (+ 1 index))))))

(bind-func find_substring_or:[i64,String*,String*,String*]*
  (lambda (tbs sf1 sf2)
    (cond ((null? tbs) -1)
          ((null? sf1) -1)
          ((null? sf2) -1)
          ((= 0 (length sf1)) -1)
          ((= 0 (length sf2)) -1)
          (else (find_substring_or_loop tbs sf1 sf2 0)))))

(bind-func find_substring_not_or_loop:[i64,String*,String*,String*,i64]*
  (lambda (tbs sf1 sf2 index)
    (cond ((= 0 (length tbs)) -1)
          ((not (or (equal (substring tbs 0 (length sf1)) sf1)
                    (equal (substring tbs 0 (length sf2)) sf2))) index)
          (else (find_substring_not_or_loop (split_second tbs 1) sf1 sf2 (+ 1 index))))))

(bind-func find_substring_not_or:[i64,String*,String*,String*]*
  (lambda (tbs sf1 sf2)
    (cond ((null? tbs) -1)
          ((null? sf1) -1)
          ((null? sf2) -1)
          ((= 0 (length sf1)) -1)
          ((= 0 (length sf2)) -1)
          (else (find_substring_not_or_loop tbs sf1 sf2 0)))))

(bind-func create_quotes:[String*]*
  (lambda ()
    (let ((cs:i8* (halloc 2)))
      (pfill! cs 34 0)
      (Str cs))))

(bind-func remove_initial_spaces:[String*,String*]*
  (lambda (s)
    (split_second s (find_substring_not_or s (Str " ") (Str "\n")))))

(bind-func extract_i64:[i64,String*]*
  (lambda (s)
    (let ((res:i64* (salloc 1)))
      (sscanf (cstring s) "%lld" res)
      (pref res 0))))

(bind-func extract_float:[float,String*]*
  (lambda (s)
    (let ((res:double* (salloc 1)))
      (sscanf (cstring s) "%f" res)
      (dtof (pref res 0)))))

