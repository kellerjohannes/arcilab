; Roll, part of ArciLab, offers the following functionality:
; - reading and parsing of musicXML files
; - storing the musical data of the XML file in a custom data structure (Score*)
; - transforming this data in a way that it becomes compatible with the ArciLab player module
; - interpreting complex pitch information in various ways

; Pass 1: naked data
; - read xml data, no interpretation happening, no configuration necessary. Score*
;   represents the identical information that is stored in the XML data
; - read tempo markings, list them separately with timing markers relative to measures
; - find a method to deal with acc. and rit.

; Pass 2: time
; - find highest measure division value and recalculate all duration values accordingly
; - recalculate the startTime values of all Note* objects as relative to the beginning of
;   the score (not the beginning of a measure)
; - resolve tied notes by prolonging the first note to span over all tied notes and
;   removing the other notes from the score (mark them as 'rest')
; - apply tempo markings, transform time codes from ticks (based on division) into SR

; Pass 3: pitch
; - assign event types based on configuration file: tabulature, pitch utopia, commands
; - parse tabulature events based on config
; - parse pitch utopia information as far as possible (glissando for later?)
; - parse command literals, substitute replacement strings with Note* values

; Pass 4: rewrite
; - assign voice distribution for player module
; - transform the Score* data into an event table, chronologically ordered

; Pass 5: real time
; - send event messages to the real time player module, in flexible speed, forward and
;   reverse 


; Wish list:
; - revisit all error messages, clean up
; - renaming error handling system, make it global (not part of ROLL)
; + pre-parse xml file to determine highest division, store in Score*
; + integrate recalculation of timing info (StartTime and Duration) based on highest division in the score
; - pass 1 (read and store XML data):
;   + implementation xml voice data (necessary for tie detection, useful for polyphony
;     management)
;   - substitute replacement strings in commands with Note* data
;   - find a solution for text (pitch info / command literals): pitch info note related
;     (lyrics?), commands generic text (timing?)
;   - read and store tempo markings
; - pass 2
; - system crashes then last line of xml file is not empty -> fix is complicated

; redundant stuff:
; - division value for Measure* object (is now globalised while reading xml data)
; - 'rest' value in Note* object -> can be used to mute notes. rests in xml data are
;   ignored while parsing xml



(bind-val ROLL_MAX_NUM_VOICES i64 128)


; importing custom memory objects and helper functions
(sys:load (string-append SOURCE-PATH "roll/score.xtm"))
(sys:load (string-append SOURCE-PATH "roll/configuration.xtm"))

; importing the actual arciorgano/roll functionality
(sys:load (string-append SOURCE-PATH "roll/passes.xtm"))



; temporary thing, will be integrated in ArciLab main code
(bind-func parse_roll
  (lambda (score_filename:String*)
    (set! rollErr (roll_create_logfile (cat2 ROLL_WORKING_PATH (Str "logfile-parser"))))
    (letz ((score (cScore))
           (configuration (cConfig)))
      ; DEBUG: (printf "starting roll preparation.\n")
      (roll_preparation configuration)
      (print configuration)
      ; DEBUG: (printf "starting pass 1.\n")
      (roll_pass1 score (cat2 ROLL_WORKING_PATH score_filename))
      ; DEBUG: (printf "starting pass 2.\n")
      (roll_pass2 score configuration)
      ; DEBUG: (printf "starting pass 3.\n")
      (roll_pass3 score configuration)
      ; DEBUG: (printf "starting pass 4.\n")
      (roll_pass4 score configuration)
      ; DEBUG: (printf "writing score object.\n")
      (write_to_file score (Str "score-object"))
      ; DEBUG: (printf "writing logfile.\n")
      (roll_close_logfile rollErr)
      (delete score)
      (delete configuration)
      void)))

