(sys:load (string-append ROLL-SOURCE-PATH "roll/pass1.xtm"))
(sys:load (string-append ROLL-SOURCE-PATH "roll/pass2.xtm"))
(sys:load (string-append ROLL-SOURCE-PATH "roll/pass3.xtm"))
(sys:load (string-append ROLL-SOURCE-PATH "roll/pass4.xtm"))



; reads in xml data from 'filepath' and stores it in the 'score' object
(bind-func roll_pass1:[void,Score*,String*]*
  (lambda (score filepath)
    (xml_import score filepath)
    ;xml read tempo in xml score
    void))

; transforms timing information in 'score' based on configuration file in 'filepath'
(bind-func roll_pass2:[void,Score*,String*]*
  (lambda (score filepath)
    ;find highest division
    ;recalculate startTime and duration values
    ;find and resolve tied notes
    ;read default config
    ;overwrite with custom time configuration, if available
    ;calculate absolute timings based on tempo markings (using absoluteStartTime and absoluteDuration in Note*)
    void))

; transforms pitch information in 'score' based on configuaration file in 'filepath'
(bind-func roll_pass3:[void,Score*,String*]*
  (lambda (score filepath)
    ;read default config
    ;overwrite with custom config if available
    ;assign event types
    ;parse tabulature events (transform into key numbers or generic key names)
    ;parse pitch utopia information
    ;parse command literals
    void))

; assigns voices for player module, writes time sorted event table
(bind-func roll_pass4:[void,Score*,String*]* ; <EventTable> necessary, TBI
  (lambda (score filepath) ;eventTable missing
    ;write time ordered event table
    ;read default config
    ;overwrite with custom config if available
    ;assign voices according to config
    void))

