(bind-val ROLL_ERR_FLAG_DEBUG i32 0)
(bind-val ROLL_ERR_FLAG_FATAL i32 1)
(bind-val ROLL_ERR_FLAG_WARNING i32 2)
(bind-val ROLL_ERR_FLAG_INFO i32 3)

(bind-val ROLL_ERR_DEST_FILE i32 0)
(bind-val ROLL_ERR_DEST_CONSOLE i32 1)
(bind-val ROLL_ERR_DEST_ALL i32 2)

(bind-type RollError <i8*,i64>)

(bind-func id:[i8*,RollError*]*
  (lambda (re)
    (tref re 0)))

(bind-func count:[i64,RollError*]*
  (lambda (re)
    (tref re 1)))

(bind-func roll_create_logfile:[RollError*,String*]*
  (lambda (filepath)
    (let ((file (fopen (cstring filepath) "w")))
      (cond ((null? file) (printf "Error: could not open logfile for writing.\n") null)
            (else (fprintf file "Logfile roll module of ArciLab software.\n")
                  (let ((res (RollError:[RollError*,i8*,i64]* file 0)))
                    res))))))

(bind-func roll_close_logfile:[void,RollError*]*
  (lambda (re)
    (cond ((null? (id re)) (printf "Error: no logfile.\n") void)
          (else (fclose (id re))
          void))))
    
(bind-func roll_error:[void,RollError*,String*,i64,i64]*
  (lambda (re message flag destination)
    (cond ((null? (id re)) (printf "Error: no logfile.\n") void)
          (else
            (cond ((or (= destination ROLL_ERR_DEST_FILE)
                       (= destination ROLL_ERR_DEST_ALL))
                    (fprintf
          
          
          (fprintf (id re) "%s\n" (cstring message)) void))))

(bind-val err RollError* (roll_create_logfile (Str "logfile-roll")))
($ (roll_error err (Str "shit happens.") 0 0))
($ (roll_close_logfile err))
