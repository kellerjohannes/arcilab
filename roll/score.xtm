(bind-val ROLL_EVENT_TYPE_TABULATURE i32 0)
(bind-val ROLL_EVENT_TYPE_PITCH_UTOPIA i32 1)
(bind-val ROLL_EVENT_TYPE_COMMAND i32 2)
(bind-val ROLL_TIE_NONE i32 0)
(bind-val ROLL_TIE_START i32 1)
(bind-val ROLL_TIE_END i32 2)
(bind-val ROLL_TIE_WITHIN i32 3)
(bind-val ROLL_OUTPUT_HINT_TACET i32 0)
(bind-val ROLL_OUTPUT_HINT_ARCIORGANO i32 1)
(bind-val ROLL_OUTPUT_HINT_OSC i32 2)
(bind-val ROLL_OUTPUT_HINT_SAMPLER i32 3)
(bind-val ROLL_OUTPUT_HINT_MIDI i32 4)





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Note element ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; this data type stores data of one musical event, representing the xml data of a note


(bind-type Note <i64,i1,String*,i64,String*,String*,float,i64,i32,String*,String*,String*,i32,i64,i32,i8*>)
; 0 start time (in ticks, relative to beginning of measure)
; 1 rest (boolean, 0 = note, 1 = rest)
; 2 root (note name, 'A'-'G')
; 3 octave
; 4 notehead (shape of notehead)
; 5 accidental
; 6 alteration (xml element <alter>)
; 7 duration (in ticks)
; 8 tie (0 = no tie, 1 = start, 2 = end, 3 = within tie)
; 9 pitch info (coming from 'text' element)
; 10 articulation (comint from 'articulation' element)
; 11 command (command literal, coming from 'text' element)
; 12 event type (tabulature / pitch utopia / command literal)
; 13 voice assignment (for the polyphony managmenet of the player module, not representing the xml voice information necessarily)
; 14 output hint (tacet / arciorgano / oscillators / sampler / MIDI out)
; 15 auxiliary data

(bind-func startTime:[i64,Note*]*
  (lambda (n)
    (tref n 0)))

(bind-func set_starttime:[void,Note*,i64]*
  (lambda (n st)
    (tset! n 0 st)
    void))

(bind-func rest:[i1,Note*]*
  (lambda (n)
    (tref n 1)))

(bind-func set_rest:[void,Note*,i1]*
  (lambda (n r)
    (tset! n 1 r)
    void))

(bind-func root:[String*,Note*]*
  (lambda (n)
    (tref n 2)))

(bind-func set_root:[void,Note*,String*]*
  (lambda (n r)
    (tset! n 2 r)
    void))

(bind-func octave:[i64,Note*]*
  (lambda (n)
    (tref n 3)))

(bind-func set_octave:[void,Note*,i64]*
  (lambda (n o)
    (tset! n 3 o)
    void))

(bind-func notehead:[String*,Note*]*
  (lambda (n)
    (tref n 4)))

(bind-func set_notehead:[void,Note*,String*]*
  (lambda (n nh)
    (tset! n 4 nh)
    void))

(bind-func accidental:[String*,Note*]*
  (lambda (n)
    (tref n 5)))

(bind-func set_accidental:[void,Note*,String*]*
  (lambda (n a)
    (tset! n 5 a)
    void))

(bind-func alter:[float,Note*]*
  (lambda (n)
    (tref n 6)))

(bind-func set_alter:[void,Note*,float]*
  (lambda (n a)
    (tset! n 6 a)
    void))

(bind-func duration:[i64,Note*]*
  (lambda (n)
    (tref n 7)))

(bind-func set_duration:[void,Note*,i64]*
  (lambda (n d)
    (tset! n 7 d)
    void))

(bind-func tie:[i32,Note*]*
  (lambda (n)
    (tref n 8)))

(bind-func set_tie:[void,Note*,i32]*
  (lambda (n t)
    (cond ((= t ROLL_TIE_NONE) (tset! n 8 ROLL_TIE_NONE))
          ((= t ROLL_TIE_START) (tset! n 8 ROLL_TIE_START))
          ((= t ROLL_TIE_END) (tset! n 8 ROLL_TIE_END))
          ((= t ROLL_TIE_WITHIN) (tset! n 8 ROLL_TIE_WITHIN))
          (else (roll_error rollErr
                            (Str "Note element, set tie flag: unknwon tie flag. Set to 'none'.")
                            ROLL_ERR_FLAG_WARNING
                            ROLL_ERR_DEST_ALL)
                (tset! n 8 ROLL_TIE_NONE)))
     void))

(bind-func pitchInfo:[String*,Note*]*
  (lambda (n)
    (tref n 9)))

(bind-func set_pitchInfo:[void,Note*,String*]*
  (lambda (n pi)
    (tset! n 9 pi)
    void))

(bind-func articulation:[String*,Note*]*
  (lambda (n)
    (tref n 10)))

(bind-func set_articulation:[void,Note*,String*]*
  (lambda (n a)
    (tset! n 10 a)
    void))

(bind-func command:[String*,Note*]*
  (lambda (n)
    (tref n 11)))

(bind-func set_command:[void,Note*,String*]*
  (lambda (n c)
    (tset! n 11 c)
    void))

(bind-func eventType:[i32,Note*]*
  (lambda (n)
    (tref n 12)))

(bind-func set_eventType:[void,Note*,i32]*
  (lambda (n et)
    (cond ((= et ROLL_EVENT_TYPE_TABULATURE) (tset! n 12 ROLL_EVENT_TYPE_TABULATURE))
          ((= et ROLL_EVENT_TYPE_PITCH_UTOPIA) (tset! n 12 ROLL_EVENT_TYPE_PITCH_UTOPIA))
          ((= et ROLL_EVENT_TYPE_COMMAND) (tset! n 12 ROLL_EVENT_TYPE_COMMAND))
          (else (roll_error rollErr
                            (Str "Note element: unknown event type received. Set to 'tabulature'.")
                            ROLL_ERR_FLAG_WARNING
                            ROLL_ERR_DEST_ALL)
                (tset! n 12 ROLL_EVENT_TYPE_TABULATURE)))
    void))

(bind-func voice:[i64,Note*]*
  (lambda (n)
    (tref n 13)))

(bind-func set_voice:[void,Note*,i64]*
  (lambda (n v)
    (cond ((and (>= v 0) (< v ROLL_MAX_NUM_VOICES))
            (tset! n 13 v)
            void)
          (else (roll_error rollErr
                            (Str "Note element: setVoice, out of range index received. Set to 0, might cause problems in polyphony management.")
                            ROLL_ERR_FLAG_WARNING
                            ROLL_ERR_DEST_ALL)))
    void))

(bind-func outputHint:[i32,Note*]*
  (lambda (n)
    (tref n 14)))

(bind-func set_outputHint:[void,Note*,i32]*
  (lambda (n oh)
    (cond ((= oh ROLL_OUTPUT_HINT_TACET) (tset! n 14 ROLL_OUTPUT_HINT_TACET))
          ((= oh ROLL_OUTPUT_HINT_ARCIORGANO) (tset! n 14 ROLL_OUTPUT_HINT_ARCIORGANO))
          ((= oh ROLL_OUTPUT_HINT_OSC) (tset! n 14 ROLL_OUTPUT_HINT_OSC))
          ((= oh ROLL_OUTPUT_HINT_SAMPLER) (tset! n 14 ROLL_OUTPUT_HINT_SAMPLER))
          ((= oh ROLL_OUTPUT_HINT_MIDI) (tset! n 14 ROLL_OUTPUT_HINT_MIDI))
          (else (roll_error rollErr
                            (Str "Note element: unknown output hint received. Set to 'tacet'.")
                            ROLL_ERR_FLAG_WARNING
                            ROLL_ERR_DEST_ALL)
                (tset! n 14 ROLL_OUTPUT_HINT_TACET)))
    void))

(bind-func auxData:[i8*,Note*]*
  (lambda (n)
    (cond ((null? (tref n 15)) (roll_error rollErr 
                                           (Str "Note element: empty auxData requested. 'null' returned.") 
                                           ROLL_ERR_FLAG_WARNING 
                                           ROLL_ERR_DEST_FILE) 
                                null)
          (else (tref n 15)))))

(bind-func cNote:[Note*]*
  (lambda ()
    (let ((res (Note:[Note*,i64,i1,String*,i64,String*,String*,float,i64,i32,String*,String*,String*,i32,i64,i32,i8*]*
                     0
                     #t
                     (Str "undef")
                     0
                     (Str "undef")
                     (Str "undef")
                     0.0
                     0
                     ROLL_TIE_NONE
                     (Str "undef")
                     (Str "undef")
                     (Str "undef")
                     ROLL_EVENT_TYPE_TABULATURE
                     0
                     ROLL_OUTPUT_HINT_TACET
                     null)))
       res)))


(bind-func print:[void,Note*]*
  (lambda (n)
    (printf "start time:      %lld\r\nrest:            %s\nroot:            '%s'\noctave:          %lld\nnotehead:        '%s'\accidental      '%s'\nalteration:       %f\nduration:        %lld\ntie:             %s\npitch info:      '%s'\narticulation:    '%s'\ncommand literal: '%s'\nevent type:      %s\noutput hint:     %s\nauxiliary data:  %s\n" (startTime n)
                (if (rest n) "yes" "no")
                (cstring (root n))
                (octave n)
                (cstring (notehead n))
                (cstring (accidental n))
                (ftod (alter n))
                (duration n)
                (cond ((= (tie n) ROLL_TIE_NONE) "no")
                      ((= (tie n) ROLL_TIE_START) "start")
                      ((= (tie n) ROLL_TIE_END) "end")
                      ((= (tie n) ROLL_TIE_WITHIN) "within")
                      (else "unknown tie flag"))
                (cstring (pitchInfo n))
                (cstring (articulation n))
                (cstring (command n))
                (cond ((= (eventType n) ROLL_EVENT_TYPE_TABULATURE) "tabulature")
                      ((= (eventType n) ROLL_EVENT_TYPE_PITCH_UTOPIA) "pitch utopia")
                      ((= (eventType n) ROLL_EVENT_TYPE_COMMAND) "command literal")
                      (else "unknwon event type"))
                (cond ((= (outputHint n) ROLL_OUTPUT_HINT_TACET) "tacet")
                      ((= (outputHint n) ROLL_OUTPUT_HINT_ARCIORGANO) "arciorgano")
                      ((= (outputHint n) ROLL_OUTPUT_HINT_OSC) "oscillators")
                      ((= (outputHint n) ROLL_OUTPUT_HINT_SAMPLER) "sampler")
                      ((= (outputHint n) ROLL_OUTPUT_HINT_MIDI) "MIDI")
                      (else "unknown output hint"))
                (if (null? (auxData n)) "null" "yes"))
      void))








;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Measure element ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This element stores data of one measure, based on xml data. 

(bind-type Measure <i64,i64,i64,Note**>)
; 0 bar number
; 1 division
; 2 note count
; 3 notes

(bind-func number:[i64,Measure*]*
  (lambda (m)
    (tref m 0)))

(bind-func set_number:[void,Measure*,i64]*
  (lambda (m n)
    (cond ((>= n 0) (tset! m 0 n) void)
          (else (roll_error rollErr
                            (Str "Measure element: illegal bar numer received, needs to be 0 or higher. Set to 0.")
                            ROLL_ERR_FLAG_WARNING
                            ROLL_ERR_DEST_ALL)
                (tset! m 0 0)
                void))))

(bind-func division:[i64,Measure*]*
  (lambda (m)
    (tref m 1)))

(bind-func set_division:[void,Measure*,i64]*
  (lambda (m d)
    (tset! m 1 d)
    void))

(bind-func noteCount:[i64,Measure*]*
  (lambda (m)
    (tref m 2)))

(bind-func set_noteCount:[void,Measure*,i64]*
  (lambda (m nc)
    (cond ((>= nc 0) (tset! m 2 nc) void)
          (else (roll_error rollErr
                            (Str "Measure element: illegal value for note count received.  Set to 0. This will probably cause unintendet behaviour.")
                            ROLL_ERR_FLAG_WARNING
                            ROLL_ERR_DEST_ALL)
                (tset! m 2 0)
                void))))

(bind-func get_note:[Note*,Measure*,i64]*
  (lambda (m index)
    (cond ((and (>= index 0) (< index (noteCount m))) (pref (tref m 3) index))
          (else (roll_error rollErr
                            (Str "Measure element: get Note*, index out of range. Return 'null', might crash everything.")
                            ROLL_ERR_FLAG_FATAL
                            ROLL_ERR_DEST_ALL)
                null))))

(bind-func push:[void,Measure*,Note*]*
  (lambda (m n)
    (let ((tmp:Note** (halloc (+ 1 (noteCount m))))
          (i 0))
      (dotimes (i (noteCount m))
        (pset! tmp i (get_note m i)))
      (pset! tmp (noteCount m) n)
      (set_noteCount m (+ 1 (noteCount m)))
      (free (tref m 3))
      (tset! m 3 tmp)
      void)))

(bind-func print:[void,Measure*]*
  (lambda (m)
    (let ((i 0))
      (printf "Measure: no = %lld, division = %lld, note count = %lld\n"
              (number m)
              (division m)
              (noteCount m))
      (dotimes (i (noteCount m))
        (printf "--------------------------------------------------\n")
        (print:[void,Note*]* (get_note m i)))
      (printf "---------------------------------------------------\n
---------------------------------------------------\nEnd of measure no %lld.\n" (number m))
      void)))

(bind-func cMeasure:[Measure*]*
  (lambda ()
    (let ((tmp:Note** (halloc 1)))
      (set! tmp null)
      (let ((res (Measure:[Measure*,i64,i64,i64,Note**]*
                          0
                          0
                          0
                          tmp)))
        res))))





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Score element ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This element stores data of the xml score, per measure, not per part. 

(bind-type Score <i64,Measure**>)
; 0 measure count
; 1 measures

(bind-func measureCount:[i64,Score*]*
  (lambda (s)
    (tref s 0)))

(bind-func set_measureCount:[void,Score*,i64]*
  (lambda (s count)
    (cond ((>= count 0) (tset! s 0 count) void)
          (else (roll_error rollErr
                            (Str "Score element: measureCount out of range received.  Return 0. This might cause unexpected behaviour.")
                            ROLL_ERR_FLAG_WARNING
                            ROLL_ERR_DEST_ALL)
                (tset! s 0 0)
                void))))
                
(bind-func get_measure:[Measure*,Score*,i64]*
  (lambda (s index)
    (cond ((and (>= index 0) (< index (measureCount s)))
            (pref (tref s 1) index))
          (else (roll_error rollErr
                            (Str "Score element: get_measure, index out of range, returned 'null'. This might crash everything.")
                            ROLL_ERR_FLAG_FATAL
                            ROLL_ERR_DEST_ALL)
                null))))

(bind-func push:[void,Score*,Measure*]*
  (lambda (s m)
    (let ((tmp:Measure** (halloc (+ 1 (measureCount s))))
          (i 0))
      (dotimes (i (measureCount s))
        (pset! tmp i (get_measure s i)))
      (pset! tmp (measureCount s) m)
      (set_measureCount s (+ 1 (measureCount s)))
      (free (tref s 1))
      (tset! s 1 tmp)
      void)))

(bind-func print:[void,Score*]*
  (lambda (s)
    (let ((i 0))
      (printf "Score: measure count = %lld\n" (measureCount s))
      (dotimes (i (measureCount s)) 
        (printf "==================================================\n")
        (print:[void,Measure*]* (get_measure s i)))
      (printf "==================================================\n
==================================================\n")
      void)))

(bind-func cScore:[Score*]*
  (lambda ()
    (let ((tmp:Measure** (halloc 1)))
      (set! tmp null)
      (let ((res (Score:[Score*,i64,Measure**]*
                         0
                         tmp)))
        res))))


