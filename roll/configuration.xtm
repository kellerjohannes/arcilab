

;temporary stuff for debug purposes (saves compilation time):

;(define SOURCE-PATH "../../Coding/extempore/arcilab/")
;(bind-val SOURCE_PATH String* (Str "../../Coding/extempore/arcilab/"))
;(bind-val ROLL_WORKING_PATH String* (Str "../../Coding/extempore/arcilab/scores/guinea05/"))


;(sys:load (string-append SOURCE-PATH "roll/logging.xtm"))
;(bind-val rollErr RollError* (roll_create_logfile (cat2 ROLL_WORKING_PATH (Str "logfile-parser"))))

;(sys:load (string-append SOURCE-PATH "roll/strings.xtm"))


; ===============================================================


; configuration.xtm
; 
; loads and reads default and custom configuration files and stores values in a Config*
; object



; Key* object, reference to a specific key on a Studio31 keyboard
(bind-type Key <i64,i64,i64>)
; 0 pitchclass reference
; 1 octave
; 2 manual

(bind-func pitchclass:[i64,Key*]*
  (lambda (k)
    (tref k 0)))

(bind-func set_pitchclass:[void,Key*,i64]*
  (lambda (k pc)
    (tset! k 0 pc)
    void))

(bind-func octave:[i64,Key*]*
  (lambda (k)
    (tref k 1)))

(bind-func set_octave:[void,Key*,i64]*
  (lambda (k o)
    (tset! k 1 o)
    void))

(bind-func manual:[i64,Key*]*
  (lambda (k)
    (tref k 2)))

(bind-func set_manual:[void,Key*,i64]*
  (lambda (k m)
    (tset! k 2 m)
    void))

(bind-func set:[void,Key*,i64,i64,i64]*
  (lambda (k p o m)
    (tfill! k p o m)
    void))

(bind-func print:[void,Key*]*
  (lambda (k)
    (printf "Key: pitch = %lld, octave = %lld, manual = %lld\n"
            (pitchclass k)
            (octave k)
            (manual k))
    void))

(bind-func cKey:[Key*,i64,i64,i64]*
  (lambda (p o m)
    (let ((res (Key:[Key*,i64,i64,i64]* p o m)))
      res)))
      

; Notename* object, describes a pitch based on root, octave and alteration
(bind-type Notename <String*,i64,String*>)
; 0 root name (<step> element in xml data)
; 1 octave (following MIDI)
; 2 accidental

(bind-func root:[String*,Notename*]*
  (lambda (nn)
    (tref nn 0)))

(bind-func set_root:[void,Notename*,String*]*
  (lambda (nn r)
    (tset! nn 0 r)
    void))

(bind-func octave:[i64,Notename*]*
  (lambda (nn)
    (tref nn 1)))

(bind-func set_octave:[void,Notename*,i64]*
  (lambda (nn o)
    (tset! nn 1 o)
    void))

(bind-func accidental:[String*,Notename*]*
  (lambda (nn)
    (tref nn 2)))

(bind-func set_accidental:[void,Notename*,String*]*
  (lambda (nn a)
    (tset! nn 2 a)
    void))

(bind-func set:[void,Notename*,String*,i64,String*]*
  (lambda (nn r o a)
    (tfill! nn r o a)
    void))

(bind-func print:[void,Notename*]*
  (lambda (nn)
    (printf "Notename: root = '%s', octave = %lld, accidental = '%s'\n"
            (cstring (root nn))
            (octave nn)
            (cstring (accidental nn)))
    void))

(bind-func cNotename:[Notename*,String*,i64,String*]*
  (lambda (r o a)
    (let ((res (Notename:[Notename*,String*,i64,String*]* r o a)))
      res)))


; Tabulature* object, stores references from Notename* to Key*, usually read from a file
(bind-type Tabulature <i64,Notename**,Key**>)
; count
; notename array
; key array

(bind-func count:[i64,Tabulature*]*
  (lambda (t)
    (tref t 0)))

(bind-func set_count:[void,Tabulature*,i64]*
  (lambda (t c)
    (tset! t 0 c)
    void))

(bind-func get_notename:[Notename*,Tabulature*,i64]*
  (lambda (t index)
    (cond ((and (>= index 0) (< index (count t)))
            (pref (tref t 1) index))
          (else (roll_error rollErr (Str "Roll, get_notename (Tabulature*): index out of range. Returned 'null', might crash everything.") ROLL_ERR_FLAG_FATAL ROLL_ERR_DEST_ALL)
          null))))

(bind-func get_key:[Key*,Tabulature*,i64]*
  (lambda (t index)
    (cond ((and (>= index 0) (< index (count t)))
            (pref (tref t 2) index))
          (else (roll_error rollErr (Str "Roll, get_key (Tabulature*): index out of range. Returned 'null', might crash everything.") ROLL_ERR_FLAG_FATAL ROLL_ERR_DEST_ALL)
          null))))

(bind-func push:[void,Tabulature*,Notename*,Key*]*
  (lambda (tab nn k)
    (let ((tmpNotenames:Notename** (halloc (+ 1 (count tab))))
          (tmpKeys:Key** (halloc (+ 1 (count tab))))
          (i 0))
      (dotimes (i (count tab))
        (pset! tmpNotenames i (get_notename tab i))
        (pset! tmpKeys i (get_key tab i)))
      (pset! tmpNotenames (count tab) nn)
      (pset! tmpKeys (count tab) k)
      (set_count tab (+ (count tab) 1))
      (free (tref tab 1))
      (free (tref tab 2))
      (tset! tab 1 tmpNotenames)
      (tset! tab 2 tmpKeys)
      void)))

(bind-func print:[void,Tabulature*]*
  (lambda (tab)
    (if (= 0 (count tab))
      (begin (printf "Empty Tabulature!\n") void))
    (let ((i 0))
      (printf "Tabulature (count = %lld):\n" (count tab))
      (dotimes (i (count tab))
        (printf "notename '%s' %lld '%s'  ->  %lld %lld %lld\n"
                (cstring (root (get_notename tab i)))
                (octave (get_notename tab i))
                (cstring (accidental (get_notename tab i)))
                (pitchclass (get_key tab i))
                (octave (get_key tab i))
                (manual (get_key tab i))))
      void)))

(bind-func cTabulature:[Tabulature*]*
  (lambda ()
    (let ((tmpNotenames:Notename** (halloc 1))
          (tmpKeys:Key** (halloc 1)))
      (set! tmpNotenames null)
      (set! tmpKeys null)
      (let ((res (Tabulature:[Tabulature*,i64,Notename**,Key**]* 0 tmpNotenames tmpKeys)))
        res))))

(bind-func tab_extract_notename:[Notename*,String*]*
  (lambda (data)
    (let ((loc:|6,i64|* (salloc))
          (i 0))
      (aset! loc 0 (find_substring data (Str "'")))
      (dotimes (i 5)
        (aset! loc (+ 1 i) (find_substring_from data (Str "'") (+ 1 (aref loc i)))))
      (dotimes (i 6)
        (if (< (aref loc i) 0) (roll_error rollErr (Str "Roll, tab_extract_notename (Tabulature*): syntax error in tabulature file. Might destroy everything.") ROLL_ERR_FLAG_FATAL ROLL_ERR_DEST_ALL)))
      (let ((res (cNotename (substring data (+ 1 (aref loc 0)) (aref loc 1)) 
                            (extract_i64 (substring data (+ 1 (aref loc 2)) (aref loc 3)))
                            (substring data (+ 1 (aref loc 4)) (aref loc 5)))))
        res))))

(bind-func tab_extract_key:[Key*,String*]*
  (lambda (data)
    (let ((loc:|6,i64|* (salloc))
          (i 0))
      (aset! loc 0 (find_substring data (Str "'")))
      (dotimes (i 6)
        (aset! loc (+ 1 i) (find_substring_from data (Str "'") (+ 1 (aref loc i)))))
      (dotimes (i 6)
        (if (< (aref loc i) 0) (roll_error rollErr (Str "Roll, tab_extract_key (Tabulature*): syntax error in tabulature file. Might destroy everything.") ROLL_ERR_FLAG_FATAL ROLL_ERR_DEST_ALL)))
      (let ((res (cKey (extract_i64 (substring data (+ 1 (aref loc 0)) (aref loc 1))) 
                       (extract_i64 (substring data (+ 1 (aref loc 2)) (aref loc 3)))
                       (extract_i64 (substring data (+ 1 (aref loc 4)) (aref loc 5))))))
        res))))

(bind-func tab_read_lines:[void,Tabulature*,String*]*
  (lambda (tab data)
    (cond ((= 0 (length data)) void)
          (else
            (let ((newData (split_second data (find_substring data (Str "(")))))
            (cond ((equal (substring newData 0 27) (Str "(define-mapping (notename '"))
                    (let ((nn (tab_extract_notename (substring newData 0 (+ 1 (find_substring newData (Str ")"))))))
                          (ky (tab_extract_key (substring newData (+ 0 (find_substring newData (Str "arci-location '"))) (+ 1 (find_substring newData (Str "))")))))))
                      (push tab nn ky)
                      (tab_read_lines tab (split_second newData (+ 1 (find_substring newData (Str "\n")))))))
                  (else (tab_read_lines tab (split_second newData (+ 1 (find_substring newData (Str "\n"))))))))))))

(bind-func tab_load_tabulature:[void,Tabulature*,String*]*
  (lambda (tab filepath)
    (let ((filedata (sys_slurp_file (cstring filepath))))
      (cond ((null? filedata) (roll_error rollErr (Str "Roll, tab_load_tabulature: invalid file. Terrible thing.") ROLL_ERR_FLAG_FATAL ROLL_ERR_DEST_ALL) void)
            (else (let ((data (Str filedata)))
                    (tab_read_lines tab data))))
      void)))




; Config* object, stores all the configuration options for passes 2-5

(bind-type Config <String*,Tabulature*>)
; 0 filepath of tabulature file
; 1 tabulature object, mapping between notated pitches and keys

(bind-func tabulatureFilePath:[String*,Config*]*
  (lambda (conf)
    (tref conf 0)))

(bind-func set_tabulatureFilePath:[void,Config*,String*]*
  (lambda (conf f)
    (tset! conf 0 f)
    void))

(bind-func get_tabulature:[Tabulature*,Config*]*
  (lambda (conf)
    (tref conf 1)))

(bind-func set_tabulature:[void,Config*,Tabulature*]*
  (lambda (conf tab)
    (tset! conf 1 tab)
    void))
    
(bind-func print:[void,Config*]*
  (lambda (conf)
    (printf "Configuration:\ntabulatureFilePath = '%s'\n"
            (cstring (tabulatureFilePath conf)))
    void))

(bind-func cConfig:[Config*]*
  (lambda ()
    (let ((tab (cTabulature)))
      (let ((res (Config:[Config*,String*,Tabulature*]* 
                         (Str "")
                         tab)))
        res))))

(bind-func config_extract_name:[String*,String*]*
  (lambda (data)
    (let ((first (find_substring data (Str "'")))
          (second (find_substring_from data (Str "'") (+ 1 first))))
      (cond ((or (< first 0) (< second 0))
              (roll_error rollErr (Str "Roll, config_extract_name: no ' found, syntax error in config file. Huge problem.") ROLL_ERR_FLAG_FATAL ROLL_ERR_DEST_ALL)
              (Str ""))
            (else (substring data (+ 1 first) second))))))

(bind-func config_extract_value:[String*,String*]*
  (lambda (data)
    (let ((first (find_substring data (Str "'")))
          (second (find_substring_from data (Str "'") (+ 1 first)))
          (third (find_substring_from data (Str "'") (+ 1 second)))
          (fourth (find_substring_from data (Str "'") (+ 1 third))))
      (cond ((or (< third 0) (< fourth 0))
              (roll_error rollErr (Str "Roll, config_extract_name: no ' found, syntax error in config file. Huge problem.") ROLL_ERR_FLAG_FATAL ROLL_ERR_DEST_ALL)
              (Str ""))
            (else (substring data (+ 1 third) fourth))))))

(bind-func config_store_entry:[void,Config*,String*,String*]*
  (lambda (conf name value)
    (cond ((equal name (Str "tabulatureFilePath"))
            (set_tabulatureFilePath conf value))
          (else (roll_error rollErr (Str "Roll, config_store_entry: entry name unknown.  Ignoring it.") ROLL_ERR_FLAG_WARNING ROLL_ERR_DEST_ALL)))
    void))

(bind-func config_read_lines:[void,Config*,String*]*
  (lambda (conf data)
    (cond ((= 0 (length data)) void)
          (else (let ((line (remove_initial_spaces (substring data 0 (find_substring data (Str "\n"))))))
            (cond ((<= (length line) 11) 
                    (config_read_lines conf (split_second data (+ 1 (find_substring data (Str "\n"))))))
                  ((equal (substring line 0 11) (Str "(set-value "))
                    (config_store_entry conf (config_extract_name line) (config_extract_value line))
                    (config_read_lines conf (split_second data (+ 1 (find_substring data (Str "\n"))))))
                  (else (config_read_lines conf (split_second data (+ 1 (find_substring data (Str "\n"))))))))))))

(bind-func config_read_from_file:[void,Config*,String*]*
  (lambda (conf filepath)
    (let ((fileData (sys_slurp_file (cstring filepath))))
      (cond ((null? fileData) (roll_error rollErr (Str "Roll, read_config_from_file: invalid file.") ROLL_ERR_FLAG_WARNING ROLL_ERR_DEST_ALL) void)
            (else
              (config_read_lines conf (Str fileData))
              void)))))


