

;temporary stuff for debug purposes (saves compilation time):

;(define SOURCE-PATH "../../Coding/extempore/arcilab/")
;(bind-val SOURCE_PATH String* (Str "../../Coding/extempore/arcilab/"))
;(bind-val ROLL_WORKING_PATH String* (Str "../../Coding/extempore/arcilab/scores/guinea05/"))


;(sys:load (string-append SOURCE-PATH "roll/logging.xtm"))
;(bind-val rollErr RollError* (roll_create_logfile (cat2 ROLL_WORKING_PATH (Str "logfile-parser"))))

;(sys:load (string-append SOURCE-PATH "roll/strings.xtm"))


; ===============================================================


; configuration.xtm
; 
; loads and reads default and custom configuration files and stores values in a Config*
; object






; Config* object, stores all the configuration options for passes 2-5

(bind-type Config <String*,Tabulature*>)
; 0 filepath of tabulature file
; 1 tabulature object, mapping between notated pitches and keys

(bind-func tabulatureFilePath:[String*,Config*]*
  (lambda (conf)
    (tref conf 0)))

(bind-func set_tabulatureFilePath:[void,Config*,String*]*
  (lambda (conf f)
    (tset! conf 0 f)
    void))

(bind-func get_tabulature:[Tabulature*,Config*]*
  (lambda (conf)
    (tref conf 1)))

(bind-func set_tabulature:[void,Config*,Tabulature*]*
  (lambda (conf tab)
    (tset! conf 1 tab)
    void))
    
(bind-func print:[void,Config*]*
  (lambda (conf)
    (printf "Configuration:\ntabulatureFilePath = '%s'\n"
            (cstring (tabulatureFilePath conf)))
    void))

(bind-func cConfig:[Config*]*
  (lambda ()
    (let ((tab (cTabulature)))
      (let ((res (Config:[Config*,String*,Tabulature*]* 
                         (Str "")
                         tab)))
        res))))

(bind-func config_extract_name:[String*,String*]*
  (lambda (data)
    (let ((first (find_substring data (Str "'")))
          (second (find_substring_from data (Str "'") (+ 1 first))))
      (cond ((or (< first 0) (< second 0))
              (roll_error rollErr (Str "Roll, config_extract_name: no ' found, syntax error in config file. Huge problem.") ROLL_ERR_FLAG_FATAL ROLL_ERR_DEST_ALL)
              (Str ""))
            (else (substring data (+ 1 first) second))))))

(bind-func config_extract_value:[String*,String*]*
  (lambda (data)
    (let ((first (find_substring data (Str "'")))
          (second (find_substring_from data (Str "'") (+ 1 first)))
          (third (find_substring_from data (Str "'") (+ 1 second)))
          (fourth (find_substring_from data (Str "'") (+ 1 third))))
      (cond ((or (< third 0) (< fourth 0))
              (roll_error rollErr (Str "Roll, config_extract_name: no ' found, syntax error in config file. Huge problem.") ROLL_ERR_FLAG_FATAL ROLL_ERR_DEST_ALL)
              (Str ""))
            (else (substring data (+ 1 third) fourth))))))

(bind-func config_store_entry:[void,Config*,String*,String*]*
  (lambda (conf name value)
    (cond ((equal name (Str "tabulatureFilePath"))
            (set_tabulatureFilePath conf value))
          (else (roll_error rollErr (Str "Roll, config_store_entry: entry name unknown.  Ignoring it.") ROLL_ERR_FLAG_WARNING ROLL_ERR_DEST_ALL)))
    void))

(bind-func config_read_lines:[void,Config*,String*]*
  (lambda (conf data)
    (cond ((= 0 (length data)) void)
          (else (let ((line (remove_initial_spaces (substring data 0 (find_substring data (Str "\n"))))))
            (cond ((<= (length line) 11) 
                    (config_read_lines conf (split_second data (+ 1 (find_substring data (Str "\n"))))))
                  ((equal (substring line 0 11) (Str "(set-value "))
                    (config_store_entry conf (config_extract_name line) (config_extract_value line))
                    (config_read_lines conf (split_second data (+ 1 (find_substring data (Str "\n"))))))
                  (else (config_read_lines conf (split_second data (+ 1 (find_substring data (Str "\n"))))))))))))

(bind-func config_read_from_file:[void,Config*,String*]*
  (lambda (conf filepath)
    (let ((fileData (sys_slurp_file (cstring filepath))))
      (cond ((null? fileData) (roll_error rollErr (Str "Roll, read_config_from_file: invalid file.") ROLL_ERR_FLAG_WARNING ROLL_ERR_DEST_ALL) void)
            (else
              (config_read_lines conf (Str fileData))
              (roll_error rollErr (Str "Configuration file loaded.") ROLL_ERR_FLAG_INFO ROLL_ERR_DEST_ALL)
              void)))))


